// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Music.EfCore;

#nullable disable

namespace Music.EfCore.Migrations
{
    [DbContext(typeof(MusicDbContext))]
    partial class MusicDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Music.Domain.Entities.AlbumAgg.AlbumEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BandId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationTimeAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Folder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishTimeAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BandId");

                    b.ToTable("tbAlbums", (string)null);
                });

            modelBuilder.Entity("Music.Domain.Entities.ArtistAgg.ArtistEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTimeAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfDeath")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tbArtists", (string)null);
                });

            modelBuilder.Entity("Music.Domain.Entities.ArtistAgg.InstrumentEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationTimeAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbInstruments", (string)null);
                });

            modelBuilder.Entity("Music.Domain.Entities.BandAgg.ArtistBandEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArtistId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ArtistInBandState")
                        .HasColumnType("int");

                    b.Property<string>("BandId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationTimeAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("BandId");

                    b.ToTable("tbArtistBands", (string)null);
                });

            modelBuilder.Entity("Music.Domain.Entities.BandAgg.BandEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTimeAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DissolvedTimeAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FormationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstrumentEntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentEntityId");

                    b.ToTable("tbBands", (string)null);
                });

            modelBuilder.Entity("Music.Domain.Entities.GenreAgg.GenreEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationTimeAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbGenres", (string)null);
                });

            modelBuilder.Entity("Music.Domain.Entities.PictureAgg.PictureBase", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationTimeAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tbPictures", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("PictureBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Music.Domain.Entities.TrackAgg.TrackEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AlbumId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationTimeAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("MusicPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("tbTracks", (string)null);
                });

            modelBuilder.Entity("tbAlbumsGenres", b =>
                {
                    b.Property<string>("AlbumsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GenresId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AlbumsId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("tbAlbumsGenres");
                });

            modelBuilder.Entity("tbArtistsInstruments", b =>
                {
                    b.Property<string>("ArtistId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InstrumentsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ArtistId", "InstrumentsId");

                    b.HasIndex("InstrumentsId");

                    b.ToTable("tbArtistsInstruments");
                });

            modelBuilder.Entity("tbBandsGenres", b =>
                {
                    b.Property<string>("BandsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GenresId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BandsId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("tbBandsGenres");
                });

            modelBuilder.Entity("Music.Domain.Entities.PictureAgg.AlbumPicture", b =>
                {
                    b.HasBaseType("Music.Domain.Entities.PictureAgg.PictureBase");

                    b.Property<string>("AlbumId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("AlbumId");

                    b.HasDiscriminator().HasValue("AlbumPicture");
                });

            modelBuilder.Entity("Music.Domain.Entities.PictureAgg.ArtistPicture", b =>
                {
                    b.HasBaseType("Music.Domain.Entities.PictureAgg.PictureBase");

                    b.Property<string>("ArtistId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("ArtistId");

                    b.HasDiscriminator().HasValue("ArtistPicture");
                });

            modelBuilder.Entity("Music.Domain.Entities.PictureAgg.BandPicture", b =>
                {
                    b.HasBaseType("Music.Domain.Entities.PictureAgg.PictureBase");

                    b.Property<string>("BandId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("BandId");

                    b.HasDiscriminator().HasValue("BandPicture");
                });

            modelBuilder.Entity("Music.Domain.Entities.AlbumAgg.AlbumEntity", b =>
                {
                    b.HasOne("Music.Domain.Entities.BandAgg.BandEntity", "Band")
                        .WithMany("Albums")
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Band");
                });

            modelBuilder.Entity("Music.Domain.Entities.BandAgg.ArtistBandEntity", b =>
                {
                    b.HasOne("Music.Domain.Entities.ArtistAgg.ArtistEntity", "Artist")
                        .WithMany("Artists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Music.Domain.Entities.BandAgg.BandEntity", "Band")
                        .WithMany("Artists")
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Band");
                });

            modelBuilder.Entity("Music.Domain.Entities.BandAgg.BandEntity", b =>
                {
                    b.HasOne("Music.Domain.Entities.ArtistAgg.InstrumentEntity", null)
                        .WithMany("Bands")
                        .HasForeignKey("InstrumentEntityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Music.Domain.Entities.TrackAgg.TrackEntity", b =>
                {
                    b.HasOne("Music.Domain.Entities.AlbumAgg.AlbumEntity", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("tbAlbumsGenres", b =>
                {
                    b.HasOne("Music.Domain.Entities.AlbumAgg.AlbumEntity", null)
                        .WithMany()
                        .HasForeignKey("AlbumsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Music.Domain.Entities.GenreAgg.GenreEntity", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("tbArtistsInstruments", b =>
                {
                    b.HasOne("Music.Domain.Entities.ArtistAgg.ArtistEntity", null)
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Music.Domain.Entities.ArtistAgg.InstrumentEntity", null)
                        .WithMany()
                        .HasForeignKey("InstrumentsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("tbBandsGenres", b =>
                {
                    b.HasOne("Music.Domain.Entities.BandAgg.BandEntity", null)
                        .WithMany()
                        .HasForeignKey("BandsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Music.Domain.Entities.GenreAgg.GenreEntity", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Music.Domain.Entities.PictureAgg.AlbumPicture", b =>
                {
                    b.HasOne("Music.Domain.Entities.AlbumAgg.AlbumEntity", "Album")
                        .WithMany("Covers")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("Music.Domain.Entities.PictureAgg.ArtistPicture", b =>
                {
                    b.HasOne("Music.Domain.Entities.ArtistAgg.ArtistEntity", "Artist")
                        .WithMany("Pictures")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Music.Domain.Entities.PictureAgg.BandPicture", b =>
                {
                    b.HasOne("Music.Domain.Entities.BandAgg.BandEntity", "Band")
                        .WithMany("Pictures")
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Band");
                });

            modelBuilder.Entity("Music.Domain.Entities.AlbumAgg.AlbumEntity", b =>
                {
                    b.Navigation("Covers");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Music.Domain.Entities.ArtistAgg.ArtistEntity", b =>
                {
                    b.Navigation("Artists");

                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("Music.Domain.Entities.ArtistAgg.InstrumentEntity", b =>
                {
                    b.Navigation("Bands");
                });

            modelBuilder.Entity("Music.Domain.Entities.BandAgg.BandEntity", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Artists");

                    b.Navigation("Pictures");
                });
#pragma warning restore 612, 618
        }
    }
}
